# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

TEMP_KEYCHAIN_USER = ENV["TEMP_KEYCHAIN_USER"]
TEMP_KEYCHAIN_PASSWORD = ENV["TEMP_KEYCHAIN_PASSWORD"]

def delete_temp_keychain()
  delete_keychain(
    name: TEMP_KEYCHAIN_USER
  ) if File.exist? File.expand_path("~/Library/Keychains/#{TEMP_KEYCHAIN_USER}-db")
end

def create_temp_keychain()
  create_keychain(
    name: TEMP_KEYCHAIN_USER,
    password: TEMP_KEYCHAIN_PASSWORD,
    unlock: false,
    timeout: 3600,
    require_create: true,
  )
end

def ensure_temp_keychain()
  delete_temp_keychain()
  create_temp_keychain()
end

platform :ios do

  lane :certs do

    ensure_temp_keychain()
    
    app_store_connect_api_key()

    setup_ci if is_ci

    cocoapods(clean_install: is_ci)

    match(
        app_identifier: CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier), 
        type: 'appstore', 
        readonly: is_ci
    )

    # Get a new certificate for push notifications
    get_push_certificate( 
        output_path: ENV["OUTPUT_FILES_PATH"]
    )

    # Create or get certificate, and install it
    get_certificates( 
        output_path: ENV["OUTPUT_FILES_PATH"]
    )

    # Create or get provisioning profile
    get_provisioning_profile( 
      output_path: ENV["OUTPUT_FILES_PATH"],
      filename: "app.mobileprovision"
    )

    # Set the project provisioning profile (related in Xcode to the General > Signing Release section)
    update_project_provisioning( 
      xcodeproj: "Runner.xcodeproj",
      target_filter: ENV['APP_NAME'], # Name of your project
      profile: "app.mobileprovision",
      build_configuration: "Release"
    )

    # Set the right team on your project
    update_project_team( 
      teamid: CredentialsManager::AppfileConfig.try_fetch_value(:team_id)
    )

    gym
  end

  private_lane :build do
    # RUN LANE TO GET CERTS
    certs

    # INCREMENT BUILD NUMBER
    increment_build_number(xcodeproj: "Runner.xcodeproj")

    # Commit the version bump
    # commit_version_bump(xcodeproj: "Runner.xcodeproj")

    # Add a git tag for this build. This will automatically
    # use an appropriate git tag name
    # add_git_tag

    # Push the new commit and tag back to your git remote
    # push_to_git_remote

    # BUILD APP
    build_app(
        workspace: "Runner.xcworkspace", 
        scheme: "Runner",
        clean: true,
        export_method: "app-store",
        build_path: ENV["OUTPUT_FILES_PATH"],
        output_directory: ENV["OUTPUT_FILES_PATH"]
    )

  end

  desc "Push a new beta build to TestFlight"
  lane :beta do

    # RUN BUILD LANE
    build

    # GET GIT CHANGELOG
    # changelog_from_git_commits
    
    # UPLOAD TO TEST FLIGTH
    pilot(
      skip_waiting_for_build_processing: true,
      skip_submission: true,
      distribute_external: false,
      notify_external_testers: false,
    )
    
    delete_temp_keychain()

  end
  
end
