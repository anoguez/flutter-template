# Uncomment the line if you want fastlane to automatically update itself
# security unlock-keychain -psecurity unlock-keychain -p

default_platform(:ios)

# TEMP_KEYCHAIN_PASSWORD = ENV["TEMP_KEYCHAIN_PASSWORD"]
TEMP_KEYCHAIN_NAME = "fastlane_tmp_keychain"
TEMP_KEYCHAIN_PASSWORD = ''

platform :ios do

  private_lane :remove_temp_keychain do |options|
    begin 
      next if !is_ci
      name = options[:name].nil? ? TEMP_KEYCHAIN_NAME : options[:name]
      delete_keychain(
        name: name
      ) if File.exist? File.expand_path("~/Library/Keychains/#{name}-db")
    rescue => ex
      puts(ex)
    end
  end

  lane :certs do

    if is_ci
        remove_temp_keychain
        create_keychain(
            default_keychain: true,
            name: TEMP_KEYCHAIN_NAME,
            password: TEMP_KEYCHAIN_PASSWORD,
            unlock: true,
            timeout: 3600,
            lock_when_sleeps: true,
            require_create: true,
        )
        cocoapods(clean_install: true)
    end

    app_store_connect_api_key()

     # Get a new certificate for push notifications
    get_push_certificate( 
        output_path: ENV["OUTPUT_FILES_PATH"]
    )

    # Create or get certificate, and install it
    get_certificates( 
        output_path: ENV["OUTPUT_FILES_PATH"]
    )

    # Create or get provisioning profile
    get_provisioning_profile( 
      output_path: ENV["OUTPUT_FILES_PATH"],
      filename: "app.mobileprovision"
    )

    update_code_signing_settings(
        use_automatic_signing: false,
        # path: "../ios/Runner.xcodeproj",
        team_id: CredentialsManager::AppfileConfig.try_fetch_value(:team_id)
        # code_sign_identity: "iPhone Distribution",
    )

    # Set the project provisioning profile (related in Xcode to the General > Signing Release section)
    update_project_provisioning( 
      xcodeproj: "Runner.xcodeproj",
      target_filter: ENV['APP_NAME'],
      profile: "app.mobileprovision",
      build_configuration: "Release"
    )

    # Set the right team on your project
    update_project_team( 
      teamid: CredentialsManager::AppfileConfig.try_fetch_value(:team_id)
    )

    match(
        app_identifier: CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier), 
        type: 'appstore', 
        readonly: is_ci,
        output_path: ENV["OUTPUT_FILES_PATH"],
        force_for_new_devices: false,
        generate_apple_certs: false,
        fail_on_name_taken: false,
        keychain_name: TEMP_KEYCHAIN_NAME,
        keychain_password: TEMP_KEYCHAIN_PASSWORD,
        verbose: true,
    )

  end

  private_lane :build do
    
    puts "build process started..."

    unlock_keychain(
        set_default: true,
        path: TEMP_KEYCHAIN_NAME,
        password: TEMP_KEYCHAIN_PASSWORD
    )

    # Ensure that the git status is clean and no megre head or un-commited code exists
    # ensure_git_status_clean

    # RUN LANE TO GET CERTS
    # certs

    # INCREMENT BUILD NUMBER
    increment_build_number(xcodeproj: "Runner.xcodeproj")

    #Release notes - If empty will show last git commits in the notes
    # if release_notes.empty?
    #   # Fetch changelog from Git repo
    #   release_notes = changelog_from_git_commits(
    #                       commits_count: "10",
    #                       pretty: "- (%ae) %s",
    #                       date_format: "short",
    #                       match_lightweight_tag: false, 
    #                       merge_commit_filtering: "exclude_merges")
    # end    

    # Commit the version bump
    # commit_version_bump(xcodeproj: "Runner.xcodeproj")

    # Add a git tag for this build. This will automatically
    # use an appropriate git tag name
    # add_git_tag

    # Push the new commit and tag back to your git remote
    # push_to_git_remote

    # alias for "build_app"
    gym(
        workspace: "Runner.xcworkspace", 
        scheme: "Runner",
        clean: true,
        export_method: "app-store",
        build_path: ENV["OUTPUT_FILES_PATH"],
        output_directory: ENV["OUTPUT_FILES_PATH"]
    )

  end

  desc "Push a new beta build to TestFlight"
  lane :beta do

    # RUN BUILD LANE
    build
    
    # UPLOAD TO TEST FLIGTH
    pilot(
      skip_waiting_for_build_processing: true,
      skip_submission: true,
      distribute_external: false,
      notify_external_testers: false,
    #   changelog: release_notes
    )
    
  end
  
end
